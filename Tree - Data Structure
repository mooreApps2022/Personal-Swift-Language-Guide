import Foundation

/*
 Root Node - top level node
 Parent Node - node with child nodes
 Child Node - has a parent and could have children
 Leaf Node - botton level node, with no children
 */

class TreeNode<T> {
    
    var value: T
    var children: [TreeNode] = []
    
    init(_ value: T) {
        self.value = value
    }
    
    func add(_ child: TreeNode) {
        self.children.append(child)
    }
    
}

extension TreeNode {
    
    func forEachDepthFirst(_ visit:(TreeNode) -> Void) {
        
        visit(self)
        children.forEach {
            $0.forEachDepthFirst(visit)
        }
    }
    
}

let beverages = TreeNode<String>("BEVERAGES")

let hot = TreeNode<String>("Hot:")
let cold = TreeNode<String>("Cold:")

beverages.add(hot)
beverages.add(cold)

let soda = TreeNode<String>("- Soda")
let milk = TreeNode<String>("- Milk")

cold.add(soda)
cold.add(milk)

let coffee = TreeNode<String>("- Coffee")
let tea = TreeNode<String>("- Tea")

hot.add(coffee)
hot.add(tea)

beverages.forEachDepthFirst {
    print($0.value)
}
